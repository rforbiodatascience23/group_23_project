---
title: "02_clean"
author: "Group_23"
format:
  html:
    embed-resources: true
editor: visual
---

# 02. Clean data

```{r}
#| eval: true 
#| message: false
library(tidyverse)
```

## 02.1. Load data from .tsv files

```{r}
prot_cli <- read.delim("../data/01_load_proteomes_and_clinical.tsv")
```

## 02.2. Dealing with missing values

Let's take a look at the missing values:

```{r}
# How many values in total are missing
sum(is.na(prot_cli))

# Percentage of missing values
mean(is.na(prot_cli))
```

As in this case some of the columns correspond to protein expression data, while other correspond to clinical information of the patients.

### 02.2.1. Clinical information

It is already known that for the three samples corresponding to healthy patients there is no clinical information, therefore for those columns these 3 samples have NAs. Regarding the rest of the samples, it can be checked if there are many missing values, and if there is an specific column for which the number of missing values is high.

```{r}
prot_cli |>
  select(-matches("^NP"),
         -matches("^XP"),
         -matches("^YP"),
         -Complete.TCGA.ID) |>
  summarise_all(~mean(is.na(.)))
```

```{r}
prot_cli |>
  select(-matches("^NP"),
         -matches("^XP"),
         -matches("^YP"),
         -Complete.TCGA.ID) |>
  summarise_all(~mean(is.na(.))) |>
  select(where(~. > 0.3))
```

We can see how the column with missing values is in this case the one named Days.to.date.of.Death, as some of the individuals in the study did not die before the end of the study (censored data). This value should be replaced with the total number of days of the study. The rest of missing values in the part corresponding to the clinical information correspond to the samples of healthy patients (3/83=0.03614458).

### 02.2.2. Proteomics data

It can be interesting to see how many missing values are there per sample. If there are some samples with a great amount of NA values maybe it should not be considered.

```{r}
# prot_cli |>
#   select(matches("^NP"),
#          matches("^XP"),
#          matches("^YP")) |>
#   rowwise() |>
#   summarise_all(~mean(is.na(.)))
  
```

It is also interesting if there is any gene for which there is a large amount of samples with missing values. Therefore we can also take a look at missing values per row, and select the rows for which there are more than 25% of missing values.

```{r}
prot_cli |>
  select(matches("^NP"),
         matches("^XP"),
         matches("^YP")) |>
  summarise_all(~mean(is.na(.))) |>
  select(where(~. > 0.25))
```

```{r}
prot_cli |>
  select(matches("^NP"),
         matches("^XP"),
         matches("^YP")) |>
  summarise_all(~mean(is.na(.))) |>
  select(where(~. > 0.5))
```

# 

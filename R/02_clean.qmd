---
title: "02_clean"
author: "Group_23"
format:
  html:
    embed-resources: true
editor: visual
---

# 02. Clean data

```{r}
#| eval: true 
#| message: false
library(tidyverse)
```

# Load data from .tsv files

```{r}
proteomes_77 <- read.delim("../data/01_load_77_proteomes.tsv")
clinical <- read.delim("../data/01_load_clinical.tsv")
PAM50 <- read.delim("../data/01_load_PAM50.tsv")
```

# 77 Proteomes

Brief description of what it includes. From Kaggle:

-   The rows represent the different genes

-   RefSeq_accession_number: RefSeq protein ID (each protein has a unique\
    ID in a RefSeq database)

-   gene_symbol: a symbol unique to each gene (every protein is encoded\
    by some gene)

-   gene_name: a full name of that gene\
    Remaining columns: log2 iTRAQ ratios for each sample (protein\
    expression data, most important), being a total of 77 samples, three last columns are from healthy\
    individuals

### Some exploratory analysis

A brief look at the data:

```{r}
head(proteomes_77)
```

Dimension of the data:

```{r}
dim(proteomes_77)
```

We can see from the brief initial look that there are some missing values in the data. Let's take a look at the missing values:

```{r}
# How many values in total are missing
sum(is.na(proteomes_77))

# Percentage of missing values
mean(is.na(proteomes_77))
```

As in this case the columns (except the 3 first ones) correspond to the samples, it can be interesting to see how many missing values are there per sample, which in this case is per column. If there are some samples with a great amount of NA values maybe it should not be considered.

```{r}
colMeans(is.na(proteomes_77))
```

It is also interesting if there is any gene for which there is a large amount of samples with missing values. Therefore we can also take a look at missing values per row:

```{r}
sum(which(rowMeans(is.na(proteomes_77)) > 0.4))
sum(which(rowMeans(is.na(proteomes_77)) > 0))
```

TO BE CONTINUE LATER

# Clinical data

Brief description of what it includes. From Kaggle:

-   First column "Complete TCGA ID" is used to match the sample IDs in the main cancer proteomes file (see example script).\
    All other columns have self-explanatory names, contain data about the cancer classification of a given sample using different methods. 'PAM50 mRNA' classification is being used in the example script.

### Some exploratory analysis

A brief look at the data:

```{r}
head(clinical)
```

Dimension of the data:

```{r}
dim(clinical)
```

We can see from the brief initial look that there are some missing values in the data. Let's take a look at the missing values:

```{r}
# How many values in total are missing
sum(is.na(clinical))

# Percentage of missing values
mean(is.na(clinical))
```

We can check which columns have the most of missing values:

```{r}
# Percentage of missing values per column
colMeans(is.na(clinical))

# Which columns have missing values
which(colMeans(is.na(clinical)) != 0)
```

We can see how the column with missing values is in this case the one named Days.to.date.of.Death, as some of the individuals in the study did not die before the end of the study (censored data).

The names in the first column of the clinical data should be the same as the rownames for the 77 proteome data, at least the columns which correspond to cancer patients. Nevertheless the number of rows in the clinical data is 105, while the number of samples for which we have proteomes is due to the low quality of 28 of the samples, where analysis concluded that they were severely compromised by protein degradation. In addition the names of the samples are not parsed in the same way, therefore in order to

```{r}
head(proteomes_77)
```

```{r}
head(clinical)
```

There are 3 samples duplicated, see how can we manage this; but 86(columns in proteomes)-3(initial with no samples)-3(helathy individuals)=80; it should be 77, but there are two duplicates. See if we can just a tag like, \_01 and 02; they do not have the same information, the values are different.

```{r}
proteomes_77 <- proteomes_77 %>% 
rename_with(
  ~ make.unique(str_replace(., "^(\\w{2})\\.(\\w{4})\\.(\\d{2})TCGA$", "TCGA-\\1-\\2")), everything())
```

```{r}
dim(proteomes_77)
dim(clinical)
```

```{r}
transposed_proteomes_77 <- setNames(as.data.frame(t(proteomes_77[-(1:3)])), proteomes_77$RefSeq_accession_number)
transposed_proteomes_77 <- transposed_proteomes_77 |> rownames_to_column(var = "Complete.TCGA.ID") 
```

```{r}
merged_df <- full_join(transposed_proteomes_77, clinical, by = "Complete.TCGA.ID")
head(merged_df)
```
